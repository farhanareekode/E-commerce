import openpyxl
from django.http import HttpResponse
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfgen import canvas
from django.shortcuts import render, redirect
from django.contrib import messages
from .models import Contact

def admin_export_to_excel(request):
    # Create Excel workbook
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "Contacts"

    # Add headers
    headers = ['Name', 'Email', 'Subject', 'Message', 'Created At']
    sheet.append(headers)

    # Add data rows
    for contact in Contact.objects.all():
        sheet.append([
            contact.name,
            contact.email,
            contact.subject,
            contact.message,
            contact.created_at.strftime('%Y-%m-%d %H:%M:%S'),
        ])

    # Create HTTP response
    response = HttpResponse(
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    response['Content-Disposition'] = 'attachment; filename=contacts.xlsx'
    workbook.save(response)
    return response


from django.http import HttpResponse
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import (
    SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from io import BytesIO

from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from io import BytesIO
from django.http import HttpResponse

def admin_export_to_pdf(request):
    # PDF response setup
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=contacts.pdf'

    # Create PDF buffer
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter, topMargin=50, bottomMargin=50)
    elements = []

    # Custom styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        "TitleStyle",
        parent=styles["Title"],
        fontSize=16,
        alignment=1,  # Center alignment
        spaceAfter=20,
    )
    normal_style = ParagraphStyle(
        "NormalStyle",
        parent=styles["Normal"],
        fontSize=10,
        spaceAfter=6,
        wordWrap='LTR',  # Ensure proper wrapping
    )

    # PDF Title
    elements.append(Paragraph("Contact Form Submissions", title_style))
    elements.append(Spacer(1, 12))

    # Table Data
    data = [["Name", "Email", "Subject", "Message", "Date"]]  # Table Header
    for contact in Contact.objects.all():
        data.append([
            contact.name,
            contact.email,
            contact.subject,
            Paragraph(contact.message, normal_style),  # Wrap long text
            contact.created_at.strftime('%Y-%m-%d'),
        ])

    # Table Styling
    table = Table(data, colWidths=[80, 140, 100, 220, 80])  # Adjusted column widths
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightblue),  # Header background
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),  # Header text color
        ("ALIGN", (0, 0), (-1, -1), "LEFT"),  # Align content to left
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),  # Header font
        ("FONTSIZE", (0, 0), (-1, 0), 12),  # Header font size
        ("BOTTOMPADDING", (0, 0), (-1, 0), 12),  # Header padding
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),  # Grid lines
        ("VALIGN", (0, 0), (-1, -1), "TOP"),  # Vertical alignment
    ]))

    elements.append(table)

    # Footer with page numbers
    def footer(canvas, doc):
        canvas.saveState()
        footer_text = "Generated by Contact Manager | Page %d" % doc.page
        canvas.setFont("Helvetica", 9)
        canvas.drawString(72, 0.75 * inch, footer_text)  # 72 points = 1 inch
        canvas.restoreState()

    # Build PDF
    doc.build(elements, onFirstPage=footer, onLaterPages=footer)
    pdf = buffer.getvalue()
    buffer.close()
    response.write(pdf)
    return response





def contact(request):
    if request.method == 'POST':
        name = request.POST.get('name', '').strip()
        email = request.POST.get('email', '').strip()
        subject = request.POST.get('subject', '').strip()
        message = request.POST.get('message', '').strip()

        # Basic validation
        if not name or not email or not subject or not message:
            messages.error(request, "All fields are required.")
            return redirect('contact_form')

        # Save to database
        contact = Contact(name=name, email=email, subject=subject, message=message)
        contact.save()

        # Success message and redirect to thank-you page
        messages.success(request, "Thank you! Your message has been sent.")
        return redirect('home')  # Redirect to a thank-you page

    context = {
        'gallery_images': range(1, 7),  # A range from 1 to 6
    }
    return render(request, 'contact.html', context)

